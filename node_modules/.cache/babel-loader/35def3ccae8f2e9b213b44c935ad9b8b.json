{"ast":null,"code":"import \"antd-mobile/lib/input-item/style/css\";\nimport _InputItem from \"antd-mobile/lib/input-item\";\nimport \"antd-mobile/lib/list/style/css\";\nimport _List from \"antd-mobile/lib/list\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS TUF GAMING\\\\Downloads\\\\realtime-chatting-main\\\\src\\\\containers\\\\Chat\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { nanoid } from 'nanoid';\nimport Cookies from 'js-cookie';\nimport { reqMessages, reqUser } from '../../api';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar promise = null;\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '一个普通人',\n      content: '',\n      messages: []\n    };\n\n    this.sendMsg = () => {\n      // 一个message: {id:nanoid, from: username, content: '', time: Date}\n      const {\n        username,\n        content\n      } = this.state;\n\n      if (!io.socket) {\n        // 连接服务器, 得到与服务器的连接对象\n        io.socket = io('ws://localhost:4000', {\n          transports: ['websocket']\n        }); // 2. 创建对象之后: 保存对象\n      }\n\n      io.socket.emit('chat', {\n        id: nanoid(),\n        from: username,\n        content,\n        time: new Date().toTimeString()\n      });\n      this.setState({\n        content: ''\n      });\n    };\n\n    this.viewMsg = msgid => {\n      return () => {\n        this.props.history.push(`/message/${msgid}`);\n      };\n    };\n  }\n\n  componentDidUpdate() {\n    // 更新显示列表\n    const chatMsg = document.getElementById('chat-msg');\n    chatMsg.scrollTo(0, chatMsg.scrollHeight);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval); //清除定时器\n\n    if (promise) {\n      Promise.race([promise, Promise.resolve()]);\n    }\n  }\n\n  componentDidMount() {\n    // 定时从服务器获取消息\n    this.interval = setInterval(() => {\n      // 更新消息列表\n      promise = reqMessages();\n      promise.then(value => {\n        this.setState({\n          messages: value.data\n        });\n      });\n    }, 2000); // 读取浏览器中的cookie\n\n    const userid = Cookies.get('userid'); // 获取用户名\n\n    promise = reqUser({\n      userid\n    });\n    promise.then(value => {\n      const response = value.data;\n\n      if (response.code === 1) {\n        //userid非法\n        this.props.history.replace('/login'); // 跳转到登录页面\n\n        return;\n      } else {\n        const {\n          username\n        } = response.data;\n        this.setState({\n          username\n        }); // 设置用户名状态\n      }\n    }); // 初始显示列表\n\n    const chatMsg = document.getElementById('chat-msg');\n    chatMsg.scrollTo(0, chatMsg.scrollHeight); // 更新消息列表\n\n    promise = reqMessages();\n    promise.then(value => {\n      if (this.state.messages.length === 0) {\n        // 如果当前消息列表为空，更新消息列表\n        this.setState({\n          messages: value.data\n        });\n      }\n    });\n\n    if (!io.socket) {\n      // 连接服务器, 得到与服务器的连接对象\n      io.socket = io('ws://localhost:4000', {\n        transports: ['websocket']\n      }); // 2. 创建对象之后: 保存对象\n    } // 绑定监听, 接收服务器发送的消息\n\n\n    io.socket.on('chat', msg => {\n      let {\n        messages\n      } = this.state;\n      messages = [...messages, msg];\n      this.setState({\n        messages\n      });\n    });\n  } // 发送消息\n\n\n  render() {\n    const {\n      messages\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-msg\",\n        children: /*#__PURE__*/_jsxDEV(_List, {\n          children: messages.map(message => {\n            // 点击查看消息详情\n            return /*#__PURE__*/_jsxDEV(_List.Item, {\n              onClick: this.viewMsg(message.id),\n              children: [message.from, \":\\xA0\", message.time, /*#__PURE__*/_jsxDEV(_List.Item.Brief, {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 23\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input-item\",\n        children: /*#__PURE__*/_jsxDEV(_InputItem, {\n          onChange: val => this.setState({\n            content: val\n          }),\n          value: this.state.content,\n          extra: /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: this.sendMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ASUS TUF GAMING/Downloads/realtime-chatting-main/src/containers/Chat/index.jsx"],"names":["React","Component","io","nanoid","Cookies","reqMessages","reqUser","promise","Chat","state","username","content","messages","sendMsg","socket","transports","emit","id","from","time","Date","toTimeString","setState","viewMsg","msgid","props","history","push","componentDidUpdate","chatMsg","document","getElementById","scrollTo","scrollHeight","componentWillUnmount","clearInterval","interval","Promise","race","resolve","componentDidMount","setInterval","then","value","data","userid","get","response","code","replace","length","on","msg","render","map","message","val"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {InputItem, List} from 'antd-mobile'\r\nimport io from 'socket.io-client'\r\nimport {nanoid} from 'nanoid'\r\nimport Cookies from 'js-cookie'\r\nimport {reqMessages, reqUser} from '../../api'\r\nimport './style.css'\r\n\r\n\r\nvar promise = null\r\nexport default class Chat extends Component {\r\n  state = {\r\n      username: '一个普通人',\r\n      content: '',\r\n      messages: []\r\n  }\r\n\r\n\r\n  componentDidUpdate () {\r\n    // 更新显示列表\r\n    const chatMsg = document.getElementById('chat-msg')\r\n    chatMsg.scrollTo(0, chatMsg.scrollHeight)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.interval)//清除定时器\r\n\r\n    if(promise){\r\n      Promise.race([promise, Promise.resolve()])\r\n    } \r\n  }\r\n\r\n  componentDidMount() {\r\n    // 定时从服务器获取消息\r\n    this.interval = setInterval(()=>{\r\n      // 更新消息列表\r\n      promise = reqMessages()\r\n      promise.then(value=>{\r\n          this.setState({messages:value.data})\r\n      })\r\n    }, 2000)\r\n\r\n\r\n    // 读取浏览器中的cookie\r\n    const userid = Cookies.get('userid')\r\n    // 获取用户名\r\n    promise = reqUser({userid})\r\n    promise.then(value=>{\r\n      const response = value.data\r\n      if(response.code===1){//userid非法\r\n        this.props.history.replace('/login')// 跳转到登录页面\r\n        return \r\n      }else{\r\n        const {username} = response.data\r\n        this.setState({username})// 设置用户名状态\r\n      }\r\n    })\r\n\r\n\r\n\r\n    // 初始显示列表\r\n    const chatMsg = document.getElementById('chat-msg')\r\n    chatMsg.scrollTo(0, chatMsg.scrollHeight)\r\n\r\n    // 更新消息列表\r\n    promise = reqMessages()\r\n    promise.then(value=>{\r\n      if(this.state.messages.length===0){// 如果当前消息列表为空，更新消息列表\r\n        this.setState({messages:value.data})\r\n      }\r\n    })\r\n    \r\n\r\n    if(!io.socket) {\r\n      // 连接服务器, 得到与服务器的连接对象\r\n      io.socket = io('ws://localhost:4000', {transports: ['websocket']})  // 2. 创建对象之后: 保存对象\r\n    }\r\n    // 绑定监听, 接收服务器发送的消息\r\n    io.socket.on('chat', msg=>{\r\n      let {messages} = this.state\r\n      messages = [...messages, msg]\r\n      this.setState({messages})\r\n    })\r\n  }\r\n\r\n\r\n  // 发送消息\r\n  sendMsg = ()=>{\r\n    // 一个message: {id:nanoid, from: username, content: '', time: Date}\r\n    const {username, content} = this.state\r\n    if(!io.socket) {\r\n      // 连接服务器, 得到与服务器的连接对象\r\n      io.socket = io('ws://localhost:4000', {transports: ['websocket']})  // 2. 创建对象之后: 保存对象\r\n    }\r\n    io.socket.emit('chat', {id:nanoid(), from:username, content, time: new Date().toTimeString()})\r\n    this.setState({content: ''})\r\n  }\r\n\r\n  // 点击查看消息详情\r\n  viewMsg = (msgid)=>{\r\n    return ()=>{\r\n      this.props.history.push(`/message/${msgid}`)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {messages} = this.state\r\n    return (\r\n      <div>\r\n        <div id='chat-msg'>\r\n        <List>\r\n          {\r\n            messages.map(message=>{\r\n              // 点击查看消息详情\r\n              return <List.Item key={message.id} onClick={this.viewMsg(message.id)}>\r\n                      {message.from}:&nbsp;{message.time}\r\n                      <List.Item.Brief>{message.content}</List.Item.Brief>\r\n                    </List.Item>\r\n            })\r\n          } \r\n        </List>\r\n        </div>\r\n        <div id='input-item'>\r\n          <InputItem onChange={val => this.setState({content: val})}\r\n          value={this.state.content}\r\n          extra={<span onClick={this.sendMsg}></span>} /> \r\n        </div>\r\n          \r\n              \r\n     </div>\r\n    )}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}